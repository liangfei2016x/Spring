spring 事务管理器 PlatformTransactionManger
Spring 为了不同的持久化框架提供了不同的 PlatformTransactionManager
Spring JDBC或者Mybits持久化数据时  用 DateSourceTransactionManager
Hibernate 3.0 进行持久化数据时  用HibernateTransactionManager

案例中1：
编程式事务管理 Demo1(很少用)
AccountService中使用TransactionTemplate
TransactionTemplate依赖DataSourceTransactionManager(接口)
DataSourceTransactionManager依赖DataSource



TransactionDefinition 
事务不考虑隔离性,会引发以下安全问题
脏读：一个事务读到了另一个事务还没有提交的数据
不可重复读：在同一个事务中，多次读取同一个数据返回的结果有所不同
幻读：一个事务读取了另一个事务中插入的一些数据 

用隔离级别来解决
定义事务隔离级别
default 默认相应数据的隔离级别
read_uncommited 什么都不防止
read_committed 防止脏读
repeatable_read 防止 脏读 不可重读
serializable 都防止

mysql 默认采用repeatable_read隔离级别
oracle 默认采用 read_committed隔离级别

事务传播行为：解决业务层方法之间的相互调用时事务调用的问题。 
常用的：
propagation_required 支持当前事务，如果不存在 就新建一个
propagation_required_new 如果事务存在，挂起当前事务，创建一个新的事务
propagation_nested 如果当前事务存在，则嵌套事务执行 事务保存点

TransactionStatus 事务状态
 事务状态

事务管理：
编程式事务管理 Demo1
1.声明式事务管理 Demo2 TransactionProxyBean (不常用)
2.声明式事务管理 Demo3 使用XML配置 基于tx/aop (常用)
	一旦配置好之后,类上不需要添加任何东西
3.声明式事务管理 Demo3 基于注解的 (常用-最简化的*****)
	配置简单,需要在业务层类上添加@Transaction的注解
